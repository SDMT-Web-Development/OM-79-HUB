@using X.PagedList
@using X.PagedList.Mvc.Core
@model IPagedList<CENTRAL79HUB>

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "My OM79 Submissions";
}

<!-- Hero Section -->
<div class="hero-section text-white d-flex align-items-center" style="background-image: url('@Url.Content("~/assets/16428394152_4939ddc42d_h.jpg")'); background-size: cover; background-position: center;">
    <div class="container text-center">
        <h1 class="display-4 fw-bold">My OM79 Submissions</h1>
        <p class="lead">Track and manage your OM79 package submissions.</p>
    </div>
</div>

<table class="table">
    <thead>
        <tr>
            <th>@Html.DisplayNameFor(model => model.FirstOrDefault().UserId)</th>
            <th>@Html.DisplayNameFor(model => model.FirstOrDefault().Otherbox)</th>
            <th>@Html.DisplayNameFor(model => model.FirstOrDefault().County)</th>
            <th>@Html.DisplayNameFor(model => model.FirstOrDefault().District)</th>
            <th>@Html.DisplayNameFor(model => model.FirstOrDefault().SmartID)</th>
            <th>Workflow Step</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @{
            // Initialize variables to track the current group and row index
            string currentGroup = null;
            int rowIndex = 0;
        }
        @foreach (var item in Model)
        {
            // Map WorkflowStep to display text
            var displayWorkflowStep = "";
            switch (item.WorkflowStep)
            {
                case null:
                case "NotStarted":
                    displayWorkflowStep = "Awaiting Submission";
                    break;
                case "RestartFromDistrict":
                case "RestartFromDistrictManager":
                    displayWorkflowStep = "Awaiting Requested Changes";
                    break;
                case "SubmittedToDistrict":
                case "SubmittedToDistrictManager":
                    displayWorkflowStep = "Under District Review";
                    break;
                case "SubmittedToCentralHDS":
                case "SubmittedToCentralGIS":
                case "SubmittedBackToDistrictManager":
                case "SubmittedBackToDistrictManagerFromOperations":
                case "SubmittedToRegionalEngineer":
                case "SubmittedToDirectorOfOperations":
                case "SubmittedToCentralChief":
                    displayWorkflowStep = "Under Central Office Review";
                    break;
                case "CancelledRequestArchive":
                    displayWorkflowStep = "Request Rescinded and Archived";
                    break;
                case "Finalized":
                case "Archived":
                    displayWorkflowStep = "Request Finalized and Archived";
                    break;
                default:
                    displayWorkflowStep = "Unknown";
                    break;
            }

            // **Determine headerClass based on displayWorkflowStep**
            string headerClass = "";
            switch (displayWorkflowStep)
            {
                case "Awaiting Submission":
                    headerClass = "my-bg-warning text-dark";
                    break;
                case "Awaiting Requested Changes":
                    headerClass = "my-bg-danger text-white";
                    break;
                case "Under District Review":
                    headerClass = "my-bg-info text-dark";
                    break;
                case "Under Central Office Review":
                    headerClass = "my-bg-purple text-white";
                    break;
                case "Request Rescinded and Archived":
                    headerClass = "my-bg-secondary text-white";
                    break;
                case "Request Finalized and Archived":
                    headerClass = "my-bg-success text-white";
                    break;
                default:
                    headerClass = "bg-light text-dark";
                    break;
            }

            // If this item's group is different from the current group, output a header
            if (currentGroup != displayWorkflowStep)
            {
                currentGroup = displayWorkflowStep;
                <tr>
                    <td colspan="7" class="fw-bold @headerClass">@currentGroup</td>
                </tr>

                // Reset rowIndex for each new group to alternate colors within each group
                rowIndex = 0;
            }

            // Increment rowIndex and determine rowClass
            rowIndex++;
            string rowClass = (rowIndex % 2 == 0) ? "table-row-even" : "table-row-odd";
            // The rest of your row remains the same
            <tr class="@rowClass">
                <td>@Html.DisplayFor(modelItem => item.UserId)</td>
                <td>@Html.DisplayFor(modelItem => item.Otherbox)</td>
                <td>@Html.DisplayFor(modelItem => item.County)</td>
                <td>@Html.DisplayFor(modelItem => item.District)</td>
                <td>@Html.DisplayFor(modelItem => item.SmartID)</td>
                <td>@displayWorkflowStep</td>
                <td>
                    <a asp-action="Details" asp-route-id="@item.OMId" class="btn btn-info">Details</a>
                </td>
                
            </tr>
        }
    </tbody>
</table>

<div class="d-flex justify-content-between custom-pagination">
    <div>
        @Html.PagedListPager(Model, page => Url.Action("Index", new { page }),
        new PagedListRenderOptions
        {
        UlElementClasses = new[] { "pagination" },
        LiElementClasses = new[] { "page-item" },
        PageClasses = new[] { "page-link" },
        LinkToPreviousPageFormat = "<span>&lsaquo;</span>",
        LinkToNextPageFormat = "<span>&rsaquo;</span>",
        LinkToFirstPageFormat = "<span>&laquo;</span>",
        LinkToLastPageFormat = "<span>&raquo;</span>",
        DisplayLinkToFirstPage = PagedListDisplayMode.Always,
        DisplayLinkToLastPage = PagedListDisplayMode.Always,
        DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
        DisplayLinkToNextPage = PagedListDisplayMode.Always,
        MaximumPageNumbersToDisplay = 3 // Adjust this number as needed
        })
    </div>
</div>



<!-- Legend for the WorkflowStep colors -->
<div class="container mt-4">
    <h4 class="text-center mb-3">Legend</h4>
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3 justify-content-center">
        <div class="col">
            <div class="legend-item my-bg-warning text-dark p-2 rounded">
                <span class="badge text-dark"></span> Awaiting Submission
            </div>
        </div>
        <div class="col">
            <div class="legend-item my-bg-danger text-white p-2 rounded">
                <span class="badge text-white"></span> Awaiting Requested Changes
            </div>
        </div>
        <div class="col">
            <div class="legend-item my-bg-info text-white p-2 rounded">
                <span class="badge text-dark"></span> Under District Review
            </div>
        </div>
        <div class="col">
            <div class="legend-item my-bg-purple text-white p-2 rounded">
                <span class="badge text-white"></span> Under Central Office Review
            </div>
        </div>
        <div class="col">
            <div class="legend-item my-bg-secondary text-white p-2 rounded">
                <span class="badge text-white"></span> Request Rescinded and Archived
            </div>
        </div>
        <div class="col">
            <div class="legend-item my-bg-success text-white p-2 rounded">
                <span class="badge text-white"></span> Request Finalized and Archived
            </div>
        </div>
    </div>
</div>

<!-- Additional Styles for Legend -->
<style>
    .table-row-even {
        background-color: white !important; /* Light grey */
    }

    .table-row-odd {
        background-color: grey !important; /* White */
    }
    .legend-item {
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        text-align: center;
    }

    .bg-purple {
        background-color: #6f42c1 !important;
    }
</style>

<style>
    /* Hero Section Styles */
    .hero-section {
        height: 300px;
        position: relative;
        background-blend-mode: darken;
        background-color: rgba(0, 0, 0, 0.5);
    }

        .hero-section h1,
        .hero-section p {
            color: #fff;
        }
    .my-bg-warning {
        background-color: #ffc107 !important; /* Yellow */
        color: #000 !important;
    }

    .my-bg-danger {
        background-color: #dc3545 !important; /* Red */
        color: #fff !important;
    }

    .my-bg-info {
        background-color: #17a2b8 !important; /* Light blue */
        color: #fff !important;
    }

    .my-bg-purple {
        background-color: #6f42c1 !important; /* Purple */
        color: #fff !important;
    }

    .my-bg-secondary {
        background-color: #6c757d !important; /* Grey */
        color: #fff !important;
    }

    .my-bg-success {
        background-color: #28a745 !important; /* Green */
        color: #fff !important;
    }
        /* Set link color to white in cells with dark backgrounds */
        .my-bg-danger a,
        .my-bg-purple a,
        .my-bg-secondary a,
        .my-bg-success a,
        .my-bg-info a {
            color: #fff !important;
        }

    /* Set link color to black in cells with light backgrounds */
    .my-bg-warning a {
        color: #000 !important;
    }

    /* Pagination styles */
    .custom-pagination .pagination {
        display: flex;
        padding-left: 0;
        list-style: none;
        border-radius: 0.25rem;
    }

    .custom-pagination .page-item {
        margin: 0 0.25rem;
    }

    .custom-pagination .page-link {
        position: relative;
        display: block;
        padding: 0.5rem 0.75rem;
        margin-left: -1px;
        line-height: 1.25;
        color: #007bff;
        background-color: #fff;
        border: 1px solid #dee2e6;
        border-radius: 0.25rem;
        text-decoration: none;
    }

        .custom-pagination .page-link:hover {
            color: #0056b3;
            background-color: #e9ecef;
            border-color: #dee2e6;
        }

    .custom-pagination .page-item.active .page-link {
        z-index: 1;
        color: #fff;
        background-color: #007bff;
        border-color: #007bff;
    }

    .custom-pagination .page-item.disabled .page-link {
        color: #6c757d;
        pointer-events: none;
        background-color: #fff;
        border-color: #dee2e6;
    }

    .custom-pagination .page-item .page-link span {
        display: inline-block;
        width: 1em;
        height: 1em;
        line-height: 1em;
        text-align: center;
        vertical-align: middle;
    }
</style>
